{"version":3,"file":"ng-dynamic-component.mjs","sources":["../../../projects/ng-dynamic-component/src/lib/io/event-argument.ts","../../../projects/ng-dynamic-component/src/lib/component-injector/token.ts","../../../projects/ng-dynamic-component/src/lib/component-injector/component-outlet-injector.directive.ts","../../../projects/ng-dynamic-component/src/lib/component-injector/component-outlet-injector.module.ts","../../../projects/ng-dynamic-component/src/lib/util.ts","../../../projects/ng-dynamic-component/src/lib/io/io.service.ts","../../../projects/ng-dynamic-component/src/lib/io/io-factory.service.ts","../../../projects/ng-dynamic-component/src/lib/dynamic-io/dynamic-io.directive.ts","../../../projects/ng-dynamic-component/src/lib/dynamic-io/dynamic-io.module.ts","../../../projects/ng-dynamic-component/src/lib/dynamic.component.ts","../../../projects/ng-dynamic-component/src/lib/dynamic.module.ts","../../../projects/ng-dynamic-component/src/lib/dynamic-attributes/dynamic-attributes.directive.ts","../../../projects/ng-dynamic-component/src/lib/dynamic-attributes/dynamic-attributes.module.ts","../../../projects/ng-dynamic-component/src/lib/window-ref/window-ref-browser.ts","../../../projects/ng-dynamic-component/src/lib/window-ref/window-ref.service.ts","../../../projects/ng-dynamic-component/src/lib/dynamic-directives/dynamic-directives.directive.ts","../../../projects/ng-dynamic-component/src/lib/dynamic-directives/dynamic-directives.module.ts","../../../projects/ng-dynamic-component/src/public-api.ts","../../../projects/ng-dynamic-component/src/ng-dynamic-component.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport function defaultEventArgumentFactory() {\n  return '$event';\n}\n\nexport const EventArgumentToken = new InjectionToken<string>('EventArgument', {\n  providedIn: 'root',\n  factory: defaultEventArgumentFactory,\n});\n","import { ComponentRef, InjectionToken } from '@angular/core';\n\nexport interface DynamicComponentInjector {\n  componentRef: ComponentRef<any> | null;\n}\n\nexport const DynamicComponentInjectorToken =\n  new InjectionToken<DynamicComponentInjector>('DynamicComponentInjector');\n","import { NgComponentOutlet } from '@angular/common';\nimport { ComponentRef, Directive, Host } from '@angular/core';\n\nimport {\n  DynamicComponentInjector,\n  DynamicComponentInjectorToken,\n} from './token';\n\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: '[ngComponentOutlet]',\n  exportAs: 'ndcComponentOutletInjector',\n  providers: [\n    {\n      provide: DynamicComponentInjectorToken,\n      useExisting: ComponentOutletInjectorDirective,\n    },\n  ],\n})\nexport class ComponentOutletInjectorDirective\n  implements DynamicComponentInjector\n{\n  get componentRef(): ComponentRef<any> {\n    // NOTE: Accessing private APIs of Angular\n    return (this.componentOutlet as any)._componentRef;\n  }\n\n  constructor(@Host() private componentOutlet: NgComponentOutlet) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ComponentOutletInjectorDirective } from './component-outlet-injector.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [ComponentOutletInjectorDirective],\n  declarations: [ComponentOutletInjectorDirective],\n})\nexport class ComponentOutletInjectorModule {}\n","import { KeyValueChangeRecord, SimpleChange, Type } from '@angular/core';\n\nexport type KeyValueChangeRecordAny = KeyValueChangeRecord<any, any>;\n\nexport function createNewChange(val: any): SimpleChange {\n  return new SimpleChange(undefined, val, true);\n}\n\nexport function createChange(val: any, prevVal: any): SimpleChange {\n  return new SimpleChange(prevVal, val, false);\n}\n\nexport function noop(): void {}\n\nexport function getCtorParamTypes(\n  ctor: any,\n  reflect: { getMetadata: (type: string, obj: object) => any[] },\n): any[] {\n  return reflect.getMetadata('design:paramtypes', ctor);\n}\n\n/**\n * Extract type arguments from Angular Directive/Component\n */\nexport function extractNgParamTypes(type: Type<any>): any[] | undefined {\n  // NOTE: Accessing private APIs of Angular\n  return (type as any)?.ctorParameters?.()?.map((param) => param.type);\n}\n","import {\n  ChangeDetectorRef,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  KeyValueChanges,\n  KeyValueDiffers,\n  OnDestroy,\n  SimpleChanges,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { DynamicComponentInjector } from '../component-injector';\nimport { createChange, createNewChange, noop } from '../util';\nimport { EventArgumentToken } from './event-argument';\nimport { EventHandler, InputsType, OutputsType, OutputWithArgs } from './types';\n\nexport interface IOMapInfo {\n  propName: string;\n  templateName: string;\n}\nexport type IOMappingList = IOMapInfo[];\nexport type KeyValueChangesAny = KeyValueChanges<any, any>;\n\nexport interface IoInitOptions {\n  trackOutputChanges?: boolean;\n}\n\ninterface OutputsTypeProcessed extends OutputsType {\n  [k: string]: EventHandler;\n}\n\n@Injectable()\nexport class IoService implements OnDestroy {\n  private checkInit = this.failInit;\n\n  private lastComponentInst: any = null;\n  private lastInputChanges: SimpleChanges;\n  private inputsDiffer = this.differs.find({}).create();\n  private compFactory: ComponentFactory<any> | null = null;\n  private outputsShouldDisconnect$ = new Subject<void>();\n\n  private inputs: InputsType;\n  private outputs: OutputsType;\n  private compInjector: DynamicComponentInjector;\n  private outputsChanged: (outputs: OutputsType) => boolean = () => false;\n\n  private get compRef() {\n    return this.compInjector.componentRef;\n  }\n\n  private get componentInst() {\n    return this.compRef ? this.compRef.instance : null;\n  }\n\n  private get componentInstChanged(): boolean {\n    if (this.lastComponentInst !== this.componentInst) {\n      this.lastComponentInst = this.componentInst;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private get compCdr(): ChangeDetectorRef {\n    return this.compRef ? this.compRef.injector.get(ChangeDetectorRef) : null;\n  }\n\n  constructor(\n    private differs: KeyValueDiffers,\n    private cfr: ComponentFactoryResolver,\n    @Inject(EventArgumentToken)\n    private eventArgument: string,\n    private cdr: ChangeDetectorRef,\n  ) {}\n\n  ngOnDestroy(): void {\n    this._disconnectOutputs();\n  }\n\n  init(\n    componentInjector: DynamicComponentInjector,\n    options: IoInitOptions = {},\n  ) {\n    this.checkInit = componentInjector ? noop : this.failInit;\n    this.compInjector = componentInjector;\n\n    if (options.trackOutputChanges) {\n      const outputsDiffer = this.differs.find({}).create();\n      this.outputsChanged = (outputs) => !!outputsDiffer.diff(outputs);\n    }\n  }\n\n  update(\n    inputs: InputsType,\n    outputs: OutputsType,\n    inputsChanged: boolean,\n    outputsChanged: boolean,\n  ) {\n    this.checkInit();\n    this.updateIO(inputs, outputs);\n\n    const compChanged = this.componentInstChanged;\n\n    if (compChanged || inputsChanged) {\n      const inputsChanges = this._getInputsChanges();\n      if (inputsChanges) {\n        this._updateInputChanges(inputsChanges);\n      }\n      this.updateInputs(compChanged || !this.lastInputChanges);\n    }\n\n    if (compChanged || outputsChanged) {\n      this.bindOutputs();\n    }\n  }\n\n  maybeUpdate() {\n    this.checkInit();\n\n    if (this.componentInstChanged) {\n      this.updateInputs(true);\n      this.bindOutputs();\n      return;\n    }\n\n    if (this.outputsChanged(this.outputs)) {\n      this.bindOutputs();\n    }\n\n    if (!this.inputs) {\n      return;\n    }\n\n    const inputsChanges = this._getInputsChanges();\n\n    if (inputsChanges) {\n      const isNotFirstChange = !!this.lastInputChanges;\n      this._updateInputChanges(inputsChanges);\n\n      if (isNotFirstChange) {\n        this.updateInputs();\n      }\n    }\n  }\n\n  private updateIO(inputs: InputsType, outputs: OutputsType) {\n    this.inputs = inputs;\n    this.outputs = outputs;\n  }\n\n  private updateInputs(isFirstChange = false) {\n    if (isFirstChange) {\n      this._updateCompFactory();\n    }\n\n    const compInst = this.componentInst;\n    let inputs = this.inputs;\n\n    if (!inputs || !compInst) {\n      return;\n    }\n\n    inputs = this._resolveInputs(inputs);\n\n    Object.keys(inputs).forEach((p) => (compInst[p] = inputs[p]));\n    // Mark component for check to re-render with new inputs\n    if (this.compCdr) {\n      this.compCdr.markForCheck();\n    }\n\n    this.notifyOnInputChanges(this.lastInputChanges, isFirstChange);\n  }\n\n  private bindOutputs() {\n    this._disconnectOutputs();\n\n    const compInst = this.componentInst;\n    let outputs = this.outputs;\n\n    if (!outputs || !compInst) {\n      return;\n    }\n\n    outputs = this._resolveOutputs(outputs);\n\n    Object.keys(outputs)\n      .filter((p) => compInst[p])\n      .forEach((p) =>\n        compInst[p]\n          .pipe(takeUntil(this.outputsShouldDisconnect$))\n          .subscribe((event: any) => {\n            this.cdr.markForCheck();\n            return (outputs[p] as EventHandler)(event);\n          }),\n      );\n  }\n\n  private notifyOnInputChanges(\n    changes: SimpleChanges = {},\n    forceFirstChanges: boolean,\n  ) {\n    // Exit early if component not interested to receive changes\n    if (!this.componentInst.ngOnChanges) {\n      return;\n    }\n\n    if (forceFirstChanges) {\n      changes = this._collectFirstChanges();\n    }\n\n    this.componentInst.ngOnChanges(changes);\n  }\n\n  private _disconnectOutputs() {\n    this.outputsShouldDisconnect$.next();\n  }\n\n  private _getInputsChanges(): KeyValueChangesAny {\n    return this.inputsDiffer.diff(this.inputs);\n  }\n\n  private _updateInputChanges(differ: KeyValueChangesAny) {\n    this.lastInputChanges = this._collectChangesFromDiffer(differ);\n  }\n\n  private _collectFirstChanges(): SimpleChanges {\n    const changes = {} as SimpleChanges;\n    const inputs = this.inputs;\n\n    Object.keys(inputs).forEach(\n      (prop) => (changes[prop] = createNewChange(inputs[prop])),\n    );\n\n    return this._resolveChanges(changes);\n  }\n\n  private _collectChangesFromDiffer(differ: KeyValueChangesAny): SimpleChanges {\n    const changes: SimpleChanges = {};\n\n    differ.forEachAddedItem(\n      (record) => (changes[record.key] = createNewChange(record.currentValue)),\n    );\n\n    differ.forEachChangedItem(\n      (record) =>\n        (changes[record.key] = createChange(\n          record.currentValue,\n          record.previousValue,\n        )),\n    );\n\n    return this._resolveChanges(changes);\n  }\n\n  private _resolveCompFactory(): ComponentFactory<any> | null {\n    try {\n      try {\n        return this.cfr.resolveComponentFactory(this.compRef.componentType);\n      } catch (e) {\n        // Fallback if componentType does not exist (happens on NgComponentOutlet)\n        return this.cfr.resolveComponentFactory(\n          this.compRef.instance.constructor,\n        );\n      }\n    } catch (e) {\n      // Factory not available - bailout\n      return null;\n    }\n  }\n\n  private _updateCompFactory() {\n    this.compFactory = this._resolveCompFactory();\n  }\n\n  private _resolveInputs(inputs: InputsType): InputsType {\n    if (!this.compFactory) {\n      return inputs;\n    }\n\n    return this._remapIO(inputs, this.compFactory.inputs);\n  }\n\n  private _resolveOutputs(outputs: OutputsType): OutputsType {\n    outputs = this._processOutputs(outputs);\n\n    if (!this.compFactory) {\n      return outputs;\n    }\n\n    return this._remapIO(outputs, this.compFactory.outputs);\n  }\n\n  private _processOutputs(outputs: OutputsType): OutputsTypeProcessed {\n    const processedOutputs: OutputsTypeProcessed = {};\n\n    Object.keys(outputs).forEach((key) => {\n      const outputExpr = outputs[key];\n\n      if (typeof outputExpr === 'function') {\n        processedOutputs[key] = outputExpr;\n      } else {\n        processedOutputs[key] =\n          outputExpr && this._processOutputArgs(outputExpr);\n      }\n    });\n\n    return processedOutputs;\n  }\n\n  private _processOutputArgs(output: OutputWithArgs): EventHandler {\n    const { handler } = output;\n    const args = 'args' in output ? output.args || [] : [this.eventArgument];\n\n    return (event) =>\n      handler(...args.map((arg) => (arg === this.eventArgument ? event : arg)));\n  }\n\n  private _resolveChanges(changes: SimpleChanges): SimpleChanges {\n    if (!this.compFactory) {\n      return changes;\n    }\n\n    return this._remapIO(changes, this.compFactory.inputs);\n  }\n\n  private _remapIO<T extends Record<string, any>>(\n    io: T,\n    mapping: IOMappingList,\n  ): T {\n    const newIO = {};\n\n    Object.keys(io).forEach((key) => {\n      const newKey = this._findPropByTplInMapping(key, mapping) || key;\n      newIO[newKey] = io[key];\n    });\n\n    return newIO as T;\n  }\n\n  private _findPropByTplInMapping(\n    tplName: string,\n    mapping: IOMappingList,\n  ): string | null {\n    for (const map of mapping) {\n      if (map.templateName === tplName) {\n        return map.propName;\n      }\n    }\n    return null;\n  }\n\n  private failInit() {\n    throw Error(\n      'IoService: ComponentInjector was not set! Please call init() method!',\n    );\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  KeyValueDiffers,\n} from '@angular/core';\n\nimport { EventArgumentToken } from './event-argument';\nimport { IoService } from './io.service';\n\n@Injectable()\nexport class IoFactoryService {\n  constructor(\n    private differs: KeyValueDiffers,\n    private cfr: ComponentFactoryResolver,\n    @Inject(EventArgumentToken)\n    private eventArgument: string,\n    private cdr: ChangeDetectorRef,\n  ) {}\n\n  create() {\n    return new IoService(this.differs, this.cfr, this.eventArgument, this.cdr);\n  }\n}\n","import {\n  Directive,\n  DoCheck,\n  Inject,\n  Input,\n  OnChanges,\n  Optional,\n  SimpleChanges,\n} from '@angular/core';\n\nimport {\n  DynamicComponentInjector,\n  DynamicComponentInjectorToken,\n} from '../component-injector';\nimport { InputsType, IoService, OutputsType } from '../io';\n\n/* eslint-disable @angular-eslint/no-conflicting-lifecycle */\n\n@Directive({\n  selector:\n    '[ndcDynamicInputs],[ndcDynamicOutputs],[ngComponentOutletNdcDynamicInputs],[ngComponentOutletNdcDynamicOutputs]',\n  providers: [IoService],\n})\nexport class DynamicIoDirective implements OnChanges, DoCheck {\n  @Input()\n  ndcDynamicInputs: InputsType;\n  @Input()\n  ngComponentOutletNdcDynamicInputs: InputsType;\n  @Input()\n  ndcDynamicOutputs: OutputsType;\n  @Input()\n  ngComponentOutletNdcDynamicOutputs: OutputsType;\n\n  private get inputs() {\n    return this.ndcDynamicInputs || this.ngComponentOutletNdcDynamicInputs;\n  }\n\n  private get outputs() {\n    return this.ndcDynamicOutputs || this.ngComponentOutletNdcDynamicOutputs;\n  }\n\n  constructor(\n    private ioService: IoService,\n    @Inject(DynamicComponentInjectorToken)\n    @Optional()\n    private componentInjector?: DynamicComponentInjector,\n  ) {\n    this.ioService.init(this.componentInjector);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.ioService.update(\n      this.inputs,\n      this.outputs,\n      this.inputsChanged(changes),\n      this.outputsChanged(changes),\n    );\n  }\n\n  ngDoCheck() {\n    this.ioService.maybeUpdate();\n  }\n\n  private inputsChanged(changes: SimpleChanges): boolean {\n    return (\n      'ngComponentOutletNdcDynamicInputs' in changes ||\n      'ndcDynamicInputs' in changes\n    );\n  }\n\n  private outputsChanged(changes: SimpleChanges): boolean {\n    return (\n      'ngComponentOutletNdcDynamicOutputs' in changes ||\n      'ndcDynamicOutputs' in changes\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ComponentOutletInjectorModule } from '../component-injector';\nimport { DynamicIoDirective } from './dynamic-io.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [DynamicIoDirective, ComponentOutletInjectorModule],\n  declarations: [DynamicIoDirective],\n})\nexport class DynamicIoModule {}\n","import {\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Injector,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  StaticProvider,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  DynamicComponentInjector,\n  DynamicComponentInjectorToken,\n} from './component-injector';\n\n@Component({\n  selector: 'ndc-dynamic',\n  template: '',\n  providers: [\n    { provide: DynamicComponentInjectorToken, useExisting: DynamicComponent },\n  ],\n})\nexport class DynamicComponent<C = any>\n  implements OnChanges, DynamicComponentInjector\n{\n  private static UpdateOnInputs: (keyof DynamicComponent)[] = [\n    'ndcDynamicComponent',\n    'ndcDynamicInjector',\n    'ndcDynamicProviders',\n    'ndcDynamicContent',\n  ];\n\n  @Input()\n  ndcDynamicComponent?: Type<C> | null;\n  @Input()\n  ndcDynamicInjector?: Injector | null;\n  @Input()\n  ndcDynamicProviders?: StaticProvider[] | null;\n  @Input()\n  ndcDynamicContent?: any[][] | null;\n\n  @Output()\n  ndcDynamicCreated: EventEmitter<ComponentRef<C>> = new EventEmitter();\n\n  componentRef: ComponentRef<C> | null = null;\n\n  constructor(private vcr: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (\n      DynamicComponent.UpdateOnInputs.some((input) =>\n        changes.hasOwnProperty(input),\n      )\n    ) {\n      this.createDynamicComponent();\n    }\n  }\n\n  createDynamicComponent() {\n    this.vcr.clear();\n    this.componentRef = null;\n\n    if (this.ndcDynamicComponent) {\n      this.componentRef = this.vcr.createComponent(this.ndcDynamicComponent, {\n        index: 0,\n        injector: this._resolveInjector(),\n        projectableNodes: this.ndcDynamicContent,\n      });\n      this.ndcDynamicCreated.emit(this.componentRef);\n    }\n  }\n\n  private _resolveInjector(): Injector {\n    let injector = this.ndcDynamicInjector || this.vcr.injector;\n\n    if (this.ndcDynamicProviders) {\n      injector = Injector.create({\n        providers: this.ndcDynamicProviders,\n        parent: injector,\n      });\n    }\n\n    return injector;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { DynamicIoModule } from './dynamic-io';\nimport { DynamicComponent } from './dynamic.component';\n\n@NgModule({\n  imports: [CommonModule, DynamicIoModule],\n  exports: [DynamicComponent, DynamicIoModule],\n  declarations: [DynamicComponent],\n})\nexport class DynamicModule {}\n","import {\n  Directive,\n  DoCheck,\n  Inject,\n  Injector,\n  Input,\n  KeyValueChanges,\n  KeyValueDiffers,\n  Optional,\n  Renderer2,\n  Type,\n} from '@angular/core';\n\nimport {\n  DynamicComponentInjector,\n  DynamicComponentInjectorToken,\n} from '../component-injector';\n\nexport interface AttributesMap {\n  [key: string]: string;\n}\n\ninterface AttributeActions {\n  set: AttributesMap;\n  remove: string[];\n}\n\n@Directive({\n  selector: '[ndcDynamicAttributes],[ngComponentOutletNdcDynamicAttributes]',\n  exportAs: 'ndcDynamicAttributes',\n})\nexport class DynamicAttributesDirective implements DoCheck {\n  @Input()\n  ndcDynamicAttributes: AttributesMap;\n  @Input()\n  ngComponentOutletNdcDynamicAttributes: AttributesMap;\n\n  private attrsDiffer = this.differs.find({}).create<string, string>();\n  private lastCompType: Type<any>;\n  private lastAttrActions: AttributeActions;\n\n  private get _attributes() {\n    return (\n      this.ndcDynamicAttributes || this.ngComponentOutletNdcDynamicAttributes\n    );\n  }\n\n  private get _nativeElement() {\n    return this.componentInjector.componentRef?.location.nativeElement;\n  }\n\n  private get _compType() {\n    return this.componentInjector.componentRef?.componentType;\n  }\n\n  private get _isCompChanged() {\n    if (this.lastCompType !== this._compType) {\n      this.lastCompType = this._compType;\n      return true;\n    }\n    return false;\n  }\n\n  constructor(\n    private renderer: Renderer2,\n    private differs: KeyValueDiffers,\n    private injector: Injector,\n    @Inject(DynamicComponentInjectorToken)\n    @Optional()\n    private componentInjector?: DynamicComponentInjector,\n  ) {}\n\n  ngDoCheck(): void {\n    const isCompChanged = this._isCompChanged;\n    const changes = this.attrsDiffer.diff(this._attributes);\n\n    if (changes) {\n      this.lastAttrActions = this._changesToAttrActions(changes);\n    }\n\n    if (changes || (isCompChanged && this.lastAttrActions)) {\n      this._updateAttributes(this.lastAttrActions);\n    }\n  }\n\n  setAttribute(name: string, value: string, namespace?: string) {\n    if (this._nativeElement) {\n      this.renderer.setAttribute(this._nativeElement, name, value, namespace);\n    }\n  }\n\n  removeAttribute(name: string, namespace?: string) {\n    if (this._nativeElement) {\n      this.renderer.removeAttribute(this._nativeElement, name, namespace);\n    }\n  }\n\n  private _updateAttributes(actions: AttributeActions) {\n    // ? Early exit if no dynamic component\n    if (!this._compType) {\n      return;\n    }\n\n    Object.keys(actions.set).forEach((key) =>\n      this.setAttribute(key, actions.set[key]),\n    );\n\n    actions.remove.forEach((key) => this.removeAttribute(key));\n  }\n\n  private _changesToAttrActions(\n    changes: KeyValueChanges<string, string>,\n  ): AttributeActions {\n    const attrActions: AttributeActions = {\n      set: {},\n      remove: [],\n    };\n\n    changes.forEachAddedItem((r) => (attrActions.set[r.key] = r.currentValue));\n    changes.forEachChangedItem(\n      (r) => (attrActions.set[r.key] = r.currentValue),\n    );\n    changes.forEachRemovedItem((r) => attrActions.remove.push(r.key));\n\n    return attrActions;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ComponentOutletInjectorModule } from '../component-injector';\nimport { DynamicAttributesDirective } from './dynamic-attributes.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [DynamicAttributesDirective, ComponentOutletInjectorModule],\n  declarations: [DynamicAttributesDirective],\n})\nexport class DynamicAttributesModule {}\n","export function browserWindowFactory() {\n  return window;\n}\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\n\nimport { browserWindowFactory } from './window-ref-browser';\n\nexport const WindowRefToken = new InjectionToken<Window>('WindowRef', {\n  providedIn: 'root',\n  factory: browserWindowFactory,\n});\n\n@Injectable({ providedIn: 'root' })\nexport class WindowRefService {\n  nativeWindow = this.injector.get(WindowRefToken, null);\n\n  constructor(private injector: Injector) {}\n}\n","import {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Injector,\n  Input,\n  IterableChanges,\n  IterableDiffers,\n  OnDestroy,\n  Optional,\n  Output,\n  Type,\n  ViewContainerRef,\n  ViewRef,\n} from '@angular/core';\n\nimport {\n  DynamicComponentInjector,\n  DynamicComponentInjectorToken,\n} from '../component-injector';\nimport { InputsType, IoFactoryService, IoService, OutputsType } from '../io';\nimport { extractNgParamTypes, getCtorParamTypes } from '../util';\nimport { WindowRefService } from '../window-ref';\n\nexport interface DynamicDirectiveDef<T> {\n  type: Type<T>;\n  inputs?: InputsType;\n  outputs?: OutputsType;\n}\n\nexport function dynamicDirectiveDef<T>(\n  type: Type<T>,\n  inputs?: InputsType,\n  outputs?: OutputsType,\n): DynamicDirectiveDef<T> {\n  return { type, inputs, outputs };\n}\n\nexport interface DirectiveRef<T> {\n  instance: T;\n  type: Type<T>;\n  injector: Injector;\n  hostComponent: Type<any>;\n  hostView: ViewRef;\n  location: ElementRef;\n  changeDetectorRef: ChangeDetectorRef;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  onDestroy: (callback: Function) => void;\n}\n\n@Directive({\n  selector: '[ndcDynamicDirectives],[ngComponentOutletNdcDynamicDirectives]',\n  providers: [IoFactoryService],\n})\nexport class DynamicDirectivesDirective implements OnDestroy, DoCheck {\n  @Input()\n  ndcDynamicDirectives: DynamicDirectiveDef<any>[];\n  @Input()\n  ngComponentOutletNdcDynamicDirectives: DynamicDirectiveDef<any>[];\n\n  @Output()\n  ndcDynamicDirectivesCreated = new EventEmitter<DirectiveRef<any>[]>();\n\n  private lastCompInstance: any;\n\n  private get directives() {\n    return (\n      this.ndcDynamicDirectives || this.ngComponentOutletNdcDynamicDirectives\n    );\n  }\n\n  private get componentRef() {\n    return this.componentInjector.componentRef;\n  }\n\n  private get compInstance() {\n    return this.componentRef && this.componentRef.instance;\n  }\n\n  private get isCompChanged() {\n    if (this.lastCompInstance !== this.compInstance) {\n      this.lastCompInstance = this.compInstance;\n      return true;\n    }\n    return false;\n  }\n\n  private get hostInjector() {\n    return this.componentRef.injector;\n  }\n\n  private get hostVcr(): ViewContainerRef {\n    // NOTE: Accessing private APIs of Angular\n    // eslint-disable-next-line @typescript-eslint/dot-notation\n    return this.componentRef['_viewRef']['_viewContainerRef'];\n  }\n\n  private get reflect() {\n    return (this.windowRef.nativeWindow as any).Reflect;\n  }\n\n  private dirRef = new Map<Type<any>, DirectiveRef<any>>();\n  private dirIo = new Map<Type<any>, IoService>();\n  private dirsDiffer = this.iterableDiffers\n    .find([])\n    .create<DynamicDirectiveDef<any>>((_, def) => def.type);\n\n  constructor(\n    private iterableDiffers: IterableDiffers,\n    private ioFactoryService: IoFactoryService,\n    private windowRef: WindowRefService,\n    @Inject(DynamicComponentInjectorToken)\n    @Optional()\n    private componentInjector?: DynamicComponentInjector,\n  ) {}\n\n  ngDoCheck(): void {\n    if (this.maybeDestroyDirectives()) {\n      return;\n    }\n\n    const dirsChanges = this.dirsDiffer.diff(this.directives);\n\n    if (!dirsChanges) {\n      return this.updateDirectives();\n    }\n\n    this.processDirChanges(dirsChanges);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyAllDirectives();\n  }\n\n  private maybeDestroyDirectives() {\n    if (this.isCompChanged || !this.componentRef) {\n      this.dirsDiffer.diff([]);\n      this.destroyAllDirectives();\n    }\n\n    return !this.componentRef;\n  }\n\n  private processDirChanges(\n    changes: IterableChanges<DynamicDirectiveDef<any>>,\n  ) {\n    changes.forEachRemovedItem(({ item }) => this.destroyDirective(item));\n\n    const createdDirs = [];\n    changes.forEachAddedItem(({ item }) =>\n      createdDirs.push(this.initDirective(item)),\n    );\n\n    if (createdDirs.length) {\n      this.ndcDynamicDirectivesCreated.emit(createdDirs.filter(Boolean));\n    }\n  }\n\n  private updateDirectives() {\n    this.directives.forEach((dir) => this.updateDirective(dir));\n  }\n\n  private updateDirective(dirDef: DynamicDirectiveDef<any>) {\n    const io = this.dirIo.get(dirDef.type);\n    io.update(dirDef.inputs, dirDef.outputs, false, false);\n    io.maybeUpdate();\n  }\n\n  private initDirective(\n    dirDef: DynamicDirectiveDef<any>,\n  ): DirectiveRef<any> | undefined {\n    if (this.dirRef.has(dirDef.type)) {\n      return;\n    }\n\n    const instance = this.createDirective(dirDef.type);\n    const dir = {\n      instance,\n      type: dirDef.type,\n      injector: this.hostInjector,\n      hostComponent: this.componentRef.instance,\n      hostView: this.componentRef.hostView,\n      location: this.componentRef.location,\n      changeDetectorRef: this.componentRef.changeDetectorRef,\n      onDestroy: this.componentRef.onDestroy,\n    };\n\n    this.initDirIO(dir, dirDef.inputs, dirDef.outputs);\n    this.callInitHooks(instance);\n\n    this.dirRef.set(dir.type, dir);\n\n    return dir;\n  }\n\n  private destroyAllDirectives() {\n    this.dirRef.forEach((dir) => this.destroyDirRef(dir));\n    this.dirRef.clear();\n    this.dirIo.clear();\n  }\n\n  private destroyDirective(dirDef: DynamicDirectiveDef<any>) {\n    this.destroyDirRef(this.dirRef.get(dirDef.type));\n    this.dirRef.delete(dirDef.type);\n    this.dirIo.delete(dirDef.type);\n  }\n\n  private initDirIO(dir: DirectiveRef<any>, inputs?: any, outputs?: any) {\n    const io = this.ioFactoryService.create();\n    io.init(\n      { componentRef: this.dirToCompDef(dir) },\n      { trackOutputChanges: true },\n    );\n    io.update(inputs, outputs, !!inputs, !!outputs);\n    this.dirIo.set(dir.type, io);\n  }\n\n  private dirToCompDef(dir: DirectiveRef<any>): ComponentRef<any> {\n    return {\n      changeDetectorRef: this.componentRef.changeDetectorRef,\n      hostView: this.componentRef.hostView,\n      location: this.componentRef.location,\n      destroy: this.componentRef.destroy,\n      onDestroy: this.componentRef.onDestroy,\n      injector: this.componentRef.injector,\n      instance: dir.instance,\n      componentType: dir.type,\n    };\n  }\n\n  private destroyDirRef(dir: DirectiveRef<any>) {\n    const io = this.dirIo.get(dir.type);\n    io.ngOnDestroy();\n\n    if ('ngOnDestroy' in dir.instance) {\n      dir.instance.ngOnDestroy();\n    }\n  }\n\n  private createDirective<T>(dirType: Type<T>): T {\n    const directiveInjector = Injector.create({\n      providers: [\n        {\n          provide: dirType,\n          useClass: dirType,\n          deps: this.resolveDirParamTypes(dirType),\n        },\n        { provide: ElementRef, useValue: this.componentRef.location },\n      ],\n      parent: this.hostInjector,\n      name: `DynamicDirectiveInjector:${dirType.name}@${this.componentRef.componentType.name}`,\n    });\n\n    return directiveInjector.get(dirType);\n  }\n\n  private resolveDirParamTypes(dirType: Type<any>): any[] {\n    return (\n      // First try Angular Compiler's metadata\n      extractNgParamTypes(dirType) ??\n      // Then fallback to Typescript Reflect API\n      getCtorParamTypes(dirType, this.reflect) ??\n      // Bailout\n      []\n    );\n  }\n\n  private callInitHooks(obj: any) {\n    this.callHook(obj, 'ngOnInit');\n    this.callHook(obj, 'ngDoCheck');\n    this.callHook(obj, 'ngAfterContentInit');\n    this.callHook(obj, 'ngAfterContentChecked');\n    this.callHook(obj, 'ngAfterViewInit');\n    this.callHook(obj, 'ngAfterViewChecked');\n  }\n\n  private callHook(obj: any, hook: string, args: any[] = []) {\n    if (obj[hook]) {\n      obj[hook](...args);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ComponentOutletInjectorModule } from '../component-injector';\nimport { DynamicDirectivesDirective } from './dynamic-directives.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [DynamicDirectivesDirective, ComponentOutletInjectorModule],\n  declarations: [DynamicDirectivesDirective],\n})\nexport class DynamicDirectivesModule {}\n","/*\n * Public API Surface of ng-dynamic-component\n */\n\nexport * from './lib/io/types';\nexport * from './lib/io/event-argument';\nexport * from './lib/component-injector';\nexport * from './lib/dynamic.module';\nexport * from './lib/dynamic.component';\nexport * from './lib/dynamic-io';\nexport * from './lib/dynamic-attributes';\nexport * from './lib/dynamic-directives';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}